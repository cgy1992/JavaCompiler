package cop5556sp17;

import static org.junit.Assert.*;

import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;

import org.junit.After;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import cop5556sp17.AST.ASTNode;
import cop5556sp17.AST.Program;


public class hw7test {
	
	
	String in_path_1 = "C:/jeni/images/hands up.jpg";
	String in_path_2 = "C:/jeni/images/hnadsup2.jpg";
	String out_path = "C:/Divya/WPFPageSwitch/Images/output.jpg";
	String my_url = "http://www.avajava.com/images/avajavalogo.jpg";

	String in_path_assert = "C:/jeni/images/Images/hands up.jpg";
	String in_path_1_assert = "C:\\jeni\\images\\hands up.jpg";
	String in_path_2_assert = "C:\\jeni\\images\\hnadsup2.jpg";
	String out_path_assert = "C:\\Divya\\WPFPageSwitch\\Images\\output.jpg";


	static final boolean doPrint = true;

	static void show(Object s) {
	if (doPrint) {
	System.out.println(s);
	}
	}

	@Rule
	public ExpectedException thrown = ExpectedException.none();
	boolean devel = false;
	boolean grade = true;

	@Before
	public void initLog() {
	if (devel || grade)
	PLPRuntimeLog.initLog();
	}

	@After
	public void printLog() {
	System.out.println(PLPRuntimeLog.getString());
	}

	@Test
	public void test1() throws Exception {
	// scan, parse, and type check the program
	String progname = "compProg0";
	String input = progname
	+ "  { integer a0 a0<-0;if(a0 == 0){integer a00 integer b00 integer c00 integer d00 integer e00 e00 <- 5; d00 <- 4; c00 <- 3; b00 <- 2; a00 <- 1; if(a00 == 1){integer a01 integer b01 integer c01 integer d01 integer e01 e01 <- 55; d01 <- 44; c01 <- 33; b01 <- 22; a01 <- 11; }}} ";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[] {  };
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	String expOut = "";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
//	assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}

	@Test
	public void test2() throws Exception {
	// scan, parse, and type check the program
	String progname = "compProg1";
	String input = progname
	+ " integer x, integer y, integer z, boolean bool_1, boolean bool_2 { \nx <- 100; \ny <- x / 3 * 2; \nz <- y; \nbool_1 <- false; \nbool_2 <- true; \ninteger y \ny <- z + 20; \nz <- y; \nif(bool_2){ \nboolean bool_1 \nbool_1 <- bool_2; \n} \nif(bool_1) { \ninteger err \nerr <- 2333; \n} \ninteger pass_token \npass_token <- 0; \nwhile(pass_token != 4) { \ninteger local_1 \ninteger local_2 \nlocal_1 <- 45; \nlocal_2 <- 46; \nif(local_1 != local_2) {pass_token <- pass_token + 1;} \nif(local_1 == local_2) {pass_token <- pass_token + 1;} \nif(local_1 > local_2) {pass_token <- pass_token + 1;} \nif(local_1 >= 45) {pass_token <- pass_token + 1;} \nif(local_1 < local_2) {pass_token <- pass_token + 1;} \nif(46 <= local_2) {pass_token <- pass_token + 1;} \nif((local_1 > local_2)) {pass_token <- pass_token + 1;} \n} \n} ";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[] {  "1", "2", "3", "true", "false"  };
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	//getURL(http://www.avajava.com/images/avajavalogo.jpg)readFromURL(http://www.avajava.com/images/avajavalogo.jpg)grayOpcreateOrSetFrameshowImagewrite(C:\Divya\WPFPageSwitch\Images\output.jpg)
	String expOut = "getURL("+ my_url+")readFromURL("+my_url+")grayOpcreateOrSetFrameshowImagewrite("+out_path_assert+")";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
//	assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}

	@Test
	public void test3() throws Exception {
	// scan, parse, and type check the program
	String progname = "compProg2";
	String input = progname + " integer x, integer y, integer z, boolean bool_1, boolean bool_2 { \nx <- 100; \ny <- x / 3 * 2; \nz <- y; \nbool_1 <- false; \nbool_2 <- true; \ninteger y \ny <- z + 20; \nz <- y; \nif(bool_2){ \nboolean bool_1 \nbool_1 <- bool_2; \n} \nif(bool_1) { \ninteger err \nerr <- 2333; \n} \ninteger pass_token \npass_token <- 0; \nwhile(pass_token != 4) { \ninteger local_1 \ninteger local_2 \nlocal_1 <- 45; \nlocal_2 <- 46; \nif(local_1 != local_2) {pass_token <- pass_token + 1;} \nif(local_1 == local_2) {pass_token <- pass_token + 1;} \nif(local_1 > local_2) {pass_token <- pass_token + 1;} \nif(local_1 >= 45) {pass_token <- pass_token + 1;} \nif(local_1 < local_2) {pass_token <- pass_token + 1;} \nif(46 <= local_2) {pass_token <- pass_token + 1;} \nif((local_1 > local_2)) {pass_token <- pass_token + 1;} \n} \n} ";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[] {"1", "1", "1", "true", "true"};
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	String expOut = "";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
	//assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}

	@Test
	public void test4() throws Exception {
	// scan, parse, and type check the program
	String progname = "whileifwhileStatement0";
	String input = progname
	+ "  {\ninteger i \ninteger j \ninteger t \ni <-10; \nj <-1; \nt <-2; \nwhile (i > 0) {\ninteger k \nk <-i/j; \nif (k > 1) {\nwhile (t > 0) {t <- t-1;} \nj <- j+1;} \ni<-i-1;} \ni<-t;}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[] {  };
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	//getURL(http://www.avajava.com/images/avajavalogo.jpg)readFromURL(http://www.avajava.com/images/avajavalogo.jpg)convolvecreateOrSetFrameshowImage42
	String expOut = "getURL("+my_url+")readFromURL("+my_url+")convolvecreateOrSetFrameshowImage42";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
//	assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}

	@Test
	public void test5() throws Exception {
	// scan, parse, and type check the program
	String progname = "whileifwhileStatement1";
	String input = progname
	+ "  {\ninteger i \ninteger j \ninteger t \ni <-10; \nj <-1; \nt <-2; \nwhile (i > 0) {\ninteger k \nk <-i/j; \nif (k > 1) {\ninteger t \nt <-j; \nwhile (t > 0) {t <- t-1;} \nj <- j+1;} \ni<-i-1;} \ni<-t;}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[] { };
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	String expOut = "00121113212432355356858713813821132193421341055";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
//	assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}

	@Test
	public void test6() throws Exception {
	// scan, parse, and type check the program
	String progname = "assignParamNLocal";
	String input = progname
	+ "  integer int_foo, boolean bool_bar {int_foo <- 42;\n bool_bar <- false;integer local_foo0 \n local_foo0 <- 5; boolean local_bool0 \n local_bool0 <- true;}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[] { "1", "true" };
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	//getURL(http://www.avajava.com/images/avajavalogo.jpg)readFromURL(http://www.avajava.com/images/avajavalogo.jpg)readFromURL(http://www.avajava.com/images/avajavalogo.jpg)subcopyImagecreateOrSetFrameshowImageaddcopyImagecreateOrSetFrameshowImageshowImage
	String expOut = "getURL("+ my_url+")readFromURL("+my_url+")readFromURL("+my_url+")subcopyImagecreateOrSetFrameshowImageaddcopyImagecreateOrSetFrameshowImageshowImage";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
//	assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}

	@Test
	public void test7() throws Exception {
	// scan, parse, and type check the program
	String progname = "ifwhileStatement0";
	String input = progname
	+ " {\ninteger i \ninteger j \ni <-10; \nj <-1; \nif (i > 0) {\ninteger k \nk <-i/j; \nwhile (k > 1) {j <- j+1; \nk <-i/j;} \n} \ni<-j;}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[0];
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	String expOut = "falsetruetruetruefalse";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
//	assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}

	@Test
	public void test8() throws Exception {
	// scan, parse, and type check the program
	String progname = "booleanComp1";
	String input = progname
	+ "  { boolean a  a<- true == false;a <- 4< 5;a<- 4<=5;a<- 4 == 5;a<- 5 == 5;a<- 5 >= 4;a<- 5>=5;a<- 6> 5;a<- 4 != 5;a<- 4 < 5;a<- 4 <= 4;} ";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[0];// {
	// "file:/Users/yash/Documents/UF/Sem2/PLP/imp3.png"
	// };
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	String expOut = "truefalsefalse46falsetrue";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
//	assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}

	@Test
	public void test9() throws Exception {
	// scan, parse, and type check the program
	String progname = "whileStatement1";
	String input = progname + "  integer y { integer x\tx <- 6;\ty <- x + 1; \twhile(x >= 2) {  \t\tx <- x - 1;\t}}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[] { "1" };
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	//getURL(http://www.avajava.com/images/avajavalogo.jpg)readFromURL(http://www.avajava.com/images/avajavalogo.jpg)convolvecreateOrSetFrameshowImage
	String expOut = "getURL("+my_url+")readFromURL("+my_url+")convolvecreateOrSetFrameshowImage";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
//	assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}
	
	@Test
	public void allTheOps() throws Exception {
	// scan, parse, and type check the program
	String progname = "whileStatement2";
	String input = progname + " {\ninteger i \ninteger j \ni <-3; \nwhile (i > 0) {\ninteger j \nj <-i*2; \nwhile (j > i) {\nj<-j-1;} \ni<-i-1;} \ni<-0;}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	PLPRuntimeLog.initLog();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[] {  }; // create
	// command
	// line
	// argument
	// array
	// to
	// initialize
	// params
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	//readFromFile(C:\Divya\WPFPageSwitch\Images\Wave.jpg)grayOpconvolveblurOpcreateOrSetFrameshowImage
	String expOut = "readFromFile("+in_path_2_assert+")grayOpconvolveblurOpcreateOrSetFrameshowImage";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
//	assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	//instance.run();
	}


	@Test
	public void test10() throws Exception {
	// scan, parse, and type check the program
	String progname = "ifStatement0";
	String input = progname + "   {integer i \ninteger j \ni <-55; \nif (i == 55) {j <- 3;} \nif (i != 55){ j <- 1;}\n}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[] { my_url };
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	//getURL(http://www.avajava.com/images/avajavalogo.jpg)readFromURL(http://www.avajava.com/images/avajavalogo.jpg)createOrSetFrameshowImage
	String expOut = "getURL("+my_url+")readFromURL("+my_url+")createOrSetFrameshowImage";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
	
//	assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}

	@Test
	public void test11() throws Exception {
	// scan, parse, and type check the program
	String progname = "ifStatement3";
	String input = progname
	+ " {\ninteger i \ninteger j \ni <-10; \nj <-0; \nif (i > 5) {j <- j+1; \nif (i > 7){ \ninteger i \ni <-7; j <- j + 1; \nif (i > 8){ j <- j + 1;}\n}\n}\n}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[] {  };
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	String expOut = "";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
	//assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}

	@Test
	public void test12() throws Exception {
	// scan, parse, and type check the program
	String progname = "ifStatement4";
	String input = progname
	+ "  {integer local_int0\ninteger local_int1\nlocal_int0 <- 42;local_int1 <- 43;if(local_int0 == local_int1){integer local_int11 \n local_int11 <- 44;} if(local_int0 != local_int1){integer local_int22 \n local_int22 <- 45;}if(local_int0 != local_int1){integer local_int33 \n local_int33 <- 46;integer local_int44 \n local_int44 <- 47;}}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	//getURL(http://www.avajava.com/images/avajavalogo.jpg)readFromURL(http://www.avajava.com/images/avajavalogo.jpg)readFromURL(http://www.avajava.com/images/avajavalogo.jpg)subcopyImagecreateOrSetFrameshowImage
	String[] args = new String[] {  };
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	String expOut = "getURL("+my_url+")readFromURL("+my_url+")readFromURL("+my_url+")subcopyImagecreateOrSetFrameshowImage";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
//	assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}

	@Test
	public void test13() throws Exception {
	// scan, parse, and type check the program
	String progname = "ifwhileifStatement1";
	String input = progname + " {\ninteger i \ninteger j \nboolean b \ni <-10; \nj <-1; \nb <-true; \nif (b) {\nwhile (i > 0) {\ninteger k \nk <-i/j; \nif (k > 1) {j <- j+1;} \ni<-i-1;} \ni<-0;}\n}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[] { };
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	String expOut = "falsetrue";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
//	assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}

	@Test
	public void test14() throws Exception {
	// scan, parse, and type check the program
	String progname = "identExprParam";
	String input = progname + "  integer i { integer j j <- i;}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[] { "1" };
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	//getURL(http://www.avajava.com/images/avajavalogo.jpg)readFromURL(http://www.avajava.com/images/avajavalogo.jpg)modcopyImagecreateOrSetFrameshowImage
	String expOut = "getURL("+my_url+")readFromURL("+my_url+")modcopyImagecreateOrSetFrameshowImage";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
//	assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}

	@Test
	public void test15() throws Exception {
	// scan, parse, and type check the program
	String progname = "whileifStatement0";
	String input = progname + " {\ninteger i \ninteger j \ni <-10; \nj <-1; \nwhile (i > 0) {\ninteger k \nk <-i/j; \nif (k > 1) {j <- j+1;} \ni<-i-1;} \ni<-0;}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[] {  };
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	//"getURL("+my_url")readFromURL("+my_url+")createOrSetFrameshowImage"
	String expOut = "getURL("+my_url+")readFromURL("+my_url+")createOrSetFrameshowImage";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
//	assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}

	@Test
	public void test16() throws Exception {
	// scan, parse, and type check the program
	String progname = "assignParam";
	String input = progname + "  integer i, boolean b {i<-33; b<-false;}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[] {"1", "true" };
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	//"getURL("+my_url+")readFromURL("+my_url+")createOrSetFrameshowImagewrite("+out_path_assert+")"
	String expOut = "getURL("+my_url+")readFromURL("+my_url+")createOrSetFrameshowImagewrite("+out_path_assert+")";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
//	assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}

	@Test
	public void test17() throws Exception {
	// scan, parse, and type check the program
	String progname = "compProg1";
	String input = progname + "  integer a, integer b, integer c, boolean bool0 { a <- 4;  b <- 5; boolean boolA  boolean boolB  boolA <- true;  boolB <- false;  if(boolA == true)  {boolean a a <- boolA; bool0 <- false;while(a != boolB){integer d  integer e c <- 3 + 5; d <- 10 - 1; c <- c * d; e <- d / 3; a <- boolB;if(c > d) {     c <- d;     if(c <= d)     {        boolA <- false;    }    if(boolA < boolB)     {        c <- 0;    }}} } if(c >= 1) {     /*boolB <- bool0 | true;*/} a <- 7;}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[] { "1", "1", "1", "true" };
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	String expOut = "45truefalsetruefalse89723false9false7";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
	assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}

	@Test
	public void test18() throws Exception {
	// scan, parse, and type check the program
	String progname = "compProg2";
	String input = progname + " integer x, integer y, integer z, boolean bool_1, boolean bool_2 { \nx <- 100; \ny <- x / 3 * 2; \nz <- y; \nbool_1 <- false; \nbool_2 <- true; \ninteger y \ny <- z + 20; \nz <- y; \nif(bool_2){ \nboolean bool_1 \nbool_1 <- bool_2; \n} \nif(bool_1) { \ninteger err \nerr <- 2333; \n} \ninteger pass_token \npass_token <- 0; \nwhile(pass_token != 4) { \ninteger local_1 \ninteger local_2 \nlocal_1 <- 45; \nlocal_2 <- 46; \nif(local_1 != local_2) {pass_token <- pass_token + 1;} \nif(local_1 == local_2) {pass_token <- pass_token + 1;} \nif(local_1 > local_2) {pass_token <- pass_token + 1;} \nif(local_1 >= 45) {pass_token <- pass_token + 1;} \nif(local_1 < local_2) {pass_token <- pass_token + 1;} \nif(46 <= local_2) {pass_token <- pass_token + 1;} \nif((local_1 > local_2)) {pass_token <- pass_token + 1;} \n} \n} ";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[] { "1","1","1","true", "true" };
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	String expOut = "1006666falsetrue8686true045461234";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
	assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}

	@Test
	public void test19() throws Exception {
	// scan, parse, and type check the program
	String progname = "assignParamNLocal";
	String input = progname + "  integer int_foo, boolean bool_bar {int_foo <- 42;\n bool_bar <- false;integer local_foo0 \n local_foo0 <- 5; boolean local_bool0 \n local_bool0 <- true;}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[] { "1", "false" };
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	String expOut = "42false5true";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
	assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}

	@Test
	public void test20() throws Exception {
	// scan, parse, and type check the program
	String progname = "ifwhileifStatement0";
	String input = progname
	+ " {\ninteger i \ninteger j \ninteger k \nboolean b \ni <-10; \nj <-1; \nb <-true; \nif (b) {\nwhile (i > 0) {\nk <-i/j; \nif (k > 1) {j <- j+1;} \ni<-i-1;} \ni<-0;}\n}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[] { my_url, out_path };
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	//getURL(http://www.avajava.com/images/avajavalogo.jpg)readFromURL(http://www.avajava.com/images/avajavalogo.jpg)scalecreateOrSetFrameshowImagewrite(C:\Divya\WPFPageSwitch\Images\output.jpg)
	String expOut = "101true1029438247161514130201000";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
	assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}
	
	@Test
	public void readFromFile() throws Exception {
	// scan, parse, and type check the program
	String progname = "ifwhileifStatement1";
	String input = progname + " {\ninteger i \ninteger j \nboolean b \ni <-10; \nj <-1; \nb <-true; \nif (b) {\nwhile (i > 0) {\ninteger k \nk <-i/j; \nif (k > 1) {j <- j+1;} \ni<-i-1;} \ni<-0;}\n}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	PLPRuntimeLog.initLog();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[] { }; // create
	// command
	// line
	// argument
	// array
	// to
	// initia	// params
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	//readFromFile(C:\Divya\WPFPageSwitch\Images\wave.jpg)createOrSetFrameshowImage
	String expOut = "readFromFile("+in_path_2_assert+")createOrSetFrameshowImage";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
//	assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}


	@Test
	public void test21() throws Exception {
	// scan, parse, and type check the program
	String progname = "assignLocal";
	String input = progname + " {integer i boolean b i<-33; b<-false;}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[] {  };
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	//"getURL("+my_url+")readFromURL("+my_url+")copyImagegrayOpcreateOrSetFrameshowImage"
	String expOut = "33false";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
	assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}

	@Test
	public void test22() throws Exception {
	// scan, parse, and type check the program
	String progname = "ifStatement1";
	String input = progname + " {\ninteger i \ninteger j \ni <-56; \nif (i == 55) {j <- 3;} \nif (i != 55){ j <- 1;}\n}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[] { my_url };
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	//"getURL("+my_url+")readFromURL(+"my_url+")copyImagecreateOrSetFrameshowImage
	String expOut = "561";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
	assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}

	@Test
	public void test23() throws Exception {
	// scan, parse, and type check the program
	String progname = "ifStatement2";
	String input = progname
	+ " {\ninteger i \ninteger j \ni <-10; \nj <-0; \nif (i > 5) {j <- j+1; \nif (i > 7){ j <- j + 1; \nif (i > 8){ j <- j + 1;}\n}\n}\n}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[] { my_url };
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	String expOut = "getURL("+my_url+")readFromURL("+my_url+")createOrSetFrameshowImagescalecreateOrSetFrameshowImage";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
//	assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}

	@Test
	public void test24() throws Exception {
	// scan, parse, and type check the program
	String progname = "ifStatement3";
	String input = progname
	+ " {\ninteger i \ninteger j \ni <-10; \nj <-0; \nif (i > 5) {j <- j+1; \nif (i > 7){ \ninteger i \ni <-7; j <- j + 1; \nif (i > 8){ j <- j + 1;}\n}\n}\n}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[] { my_url };
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	
	String expOut = "getURL("+my_url+")readFromURL("+my_url+")createOrSetFrameshowImagegetXgetYmoveFrameshowImage";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
//	assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}

	@Test
	public void test25() throws Exception {
	// scan, parse, and type check the program
	String progname = "ifStatement4";
	String input = progname
	+ "  {integer local_int0\ninteger local_int1\nlocal_int0 <- 42;local_int1 <- 43;if(local_int0 == local_int1){integer local_int11 \n local_int11 <- 44;} if(local_int0 != local_int1){integer local_int22 \n local_int22 <- 45;}if(local_int0 != local_int1){integer local_int33 \n local_int33 <- 46;integer local_int44 \n local_int44 <- 47;}}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[] { my_url };
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	String expOut = "4243454647";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
	assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}
	
	@Test
	public void test26() throws Exception {
	// scan, parse, and type check the program
	String progname = "ifwhileifStatement0";
	String input = progname
	+ "  {\ninteger i \ninteger j \ninteger k \nboolean b \ni <-10; \nj <-1; \nb <-true; \nif (b) {\nwhile (i > 0) {\nk <-i/j; \nif (k > 1) {j <- j+1;} \ni<-i-1;} \ni<-0;}\n}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[] { my_url };
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	String expOut = "101true1029438247161514130201000";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
	assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}
	
	@Test
	public void test27() throws Exception {
	// scan, parse, and type check the program
	String progname = "ifwhileifStatement1";
	String input = progname
	+ "  {\ninteger i \ninteger j \nboolean b \ni <-10; \nj <-1; \nb <-true; \nif (b) {\nwhile (i > 0) {\ninteger k \nk <-i/j; \nif (k > 1) {j <- j+1;} \ni<-i-1;} \ni<-0;}\n}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[] { my_url };
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	String expOut = "4243454647";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
//	assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}
	
	@Test
	public void test28() throws Exception {
	// scan, parse, and type check the program
	String progname = "booleanComp1";
	String input = progname
	+ "   { boolean a  a<- true == false;a <- 4< 5;a<- 4<=5;a<- 4 == 5;a<- 5 == 5;a<- 5 >= 4;a<- 5>=5;a<- 6> 5;a<- 4 != 5;a<- 4 < 5;a<- 4 <= 4;} ";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[] { my_url };
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	String expOut = "4243454647";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
//	assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}
	
	@Test
	public void test29() throws Exception {
	// scan, parse, and type check the program
	String progname = "booleanComp2";
	String input = progname
	+ "   { boolean a boolean b boolean c a<-true;b<-false; c<-a<b;c<-a<=b;c<-a>b;c<-a>=b;c<-a==b;c<-a!=b;a<-false; b<-true;c<-a<b;c<-a<=b;c<-a>b;c<-a>=b;c<-a==b;c<-a!=b;a<-true; b<-true;c<-a<b;c<-a<=b;c<-a>b;c<-a>=b;c<-a==b;c<-a!=b;a<-false; b<-false;c<-a<b;c<-a<=b;c<-a>b;c<-a>=b;c<-a==b;c<-a!=b;}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[] { my_url };
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	String expOut = "truefalsefalsefalsetruetruefalsetruefalsetruetruetruefalsefalsefalsetruetruetruefalsetruefalsetruetruefalsefalsefalsefalsetruefalsetruetruefalse";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
	assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}
	
	@Test
	public void test30() throws Exception {
	// scan, parse, and type check the program
	String progname = "whileStatement0";
	String input = progname
	+ "   {\ninteger i \ninteger j \ni <-4; \nwhile (i > 0) {\nj <- i;\ni<-i-1;} \ni<-9;}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[] { my_url };
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	String expOut = "truefalsefalsefalsetruetruefalsetruefalsetruetruetruefalsefalsefalsetruetruetruefalsetruefalsetruetruefalsefalsefalsefalsetruefalsetruetruefalse";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
//	assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}
	
	@Test
	public void test31() throws Exception {
	// scan, parse, and type check the program
	String progname = "whileStatement1";
	String input = progname
	+ "     integer y { integer x\tx <- 6;\ty <- x + 1; \twhile(x >= 2) {  \t\tx <- x - 1;\t}}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[] { "1" };
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	String expOut = "truefalsefalsefalsetruetruefalsetruefalsetruetruetruefalsefalsefalsetruetruetruefalsetruefalsetruetruefalsefalsefalsefalsetruefalsetruetruefalse";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
//	assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}
	
	@Test
	public void test32() throws Exception {
	// scan, parse, and type check the program
	String progname = "whileStatement2";
	String input = progname
	+ "    {\ninteger i \ninteger j \ni <-3; \nwhile (i > 0) {\ninteger j \nj <-i*2; \nwhile (j > i) {\nj<-j-1;} \ni<-i-1;} \ni<-0;}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[] { "1" };
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	String expOut = "truefalsefalsefalsetruetruefalsetruefalsetruetruetruefalsefalsefalsetruetruetruefalsetruefalsetruetruefalsefalsefalsefalsetruefalsetruetruefalse";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
//	assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}

	
}