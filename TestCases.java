package cop5556sp17;

import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;

import org.junit.After;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;

import static org.junit.Assert.*;

import org.junit.rules.ExpectedException;

import cop5556sp17.AST.ASTNode;
import cop5556sp17.AST.Program;

public class TestCases {
	String in_path_1 = "C:/Divya/WPFPageSwitch/Images/notHand.jpg";
	String in_path_2 = "C:/Divya/WPFPageSwitch/Images/Wave.jpg";
	String out_path = "C:/Divya/WPFPageSwitch/Images/output.jpg";

	String in_path_assert = "C:/Divya/WPFPageSwitch/Images/notHand.jpg";
	String in_path_1_assert = "C:\\Divya\\WPFPageSwitch\\Images\\notHand.jpg";
	String in_path_2_assert = "C:\\Divya\\WPFPageSwitch\\Images\\Wave.jpg";
	String out_path_assert = "C:\\Divya\\WPFPageSwitch\\Images\\output.jpg";

	static final boolean doPrint = true;

	@Before
	public void initLog() {
		if (devel || grade)
			PLPRuntimeLog.initLog();
	}

	@After
	public void printLog() {
		System.out.println(PLPRuntimeLog.getString());
	}

	static void show(Object s) {

		if (doPrint) {

			System.out.println(s);

		}

	}

	@Rule

	public ExpectedException thrown = ExpectedException.none();

	boolean devel = false;

	boolean grade = true;

	@Test
	public void subImage() throws Exception {
		// scan, parse, and type check the program
		String progname = "subImage";
		String input = progname
				+ " url u {image i image j image k frame f \nu -> i; \nu -> j;k <- i-j; k -> f-> show;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		// generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		// output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		// write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		// directly execute bytecode
		String[] args = new String[] {"http://i.imgur.com/O75rAPi.jpg"}; // create
																													// command
																													// line
																													// argument
																													// array
																													// to
																													// initialize
																													// params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		//String expOut = "getURL(http://i.imgur.com/O75rAPi.jpg)readFromURL(http://i.imgur.com/O75rAPi.jpg)readFromURL(http://i.imgur.com/O75rAPi.jpg)copyImage";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
		System.setOut(new PrintStream(outContent));
		instance.run();
		//assertEquals(expOut, PLPRuntimeLog.getString());
		System.setOut(oldStream);
		instance.run();
	}

	@Test
	public void readFromURLandWriteToFile2() throws Exception {
		// scan, parse, and type check the program
		String progname = "readFromURLandWriteToFile2";
		String input = progname
				+ " url u, \nfile out \n{image i frame f \nu -> gray -> i; \n i -> f -> show; \n i -> out;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		// generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		// output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		// write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		// directly execute bytecode
		String[] args = new String[] {"http://i.imgur.com/O75rAPi.jpg",
				"C:/Divya/WPFPageSwitch/Images/new.jpg" }; // create
																							// command
																							// line
																							// argument
																							// array
																							// to
																							// initialize
																							// params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		String expOut = "";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
		System.setOut(new PrintStream(outContent));
		instance.run();
		//assertEquals(expOut, PLPRuntimeLog.getString());
		System.setOut(oldStream);
		instance.run();
	}

	@Test
	public void sleepImg() throws Exception {
		// scan, parse, and type check the program
		String progname = "sleepImg";
		String input = progname
				+ " url u {image i frame f \nu -> i -> convolve -> f -> show;sleep 5;integer j j <- 42;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		// generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		// output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		// write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		// directly execute bytecode
		String[] args = new String[] { "http://i.imgur.com/O75rAPi.jpg" }; // create
																			// command
																			// line
																			// argument
																			// array
																			// to
																			// initialize
																			// params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		String expOut = "";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
		System.setOut(new PrintStream(outContent));
		instance.run();
		//assertEquals(expOut, PLPRuntimeLog.getString());
		System.setOut(oldStream);
		instance.run();
	}

	@Test
	public void addImage() throws Exception {
		// scan, parse, and type check the program
		String progname = "addImage";
		String input = progname
				+ " url u {image i image j image k frame f \nu -> i; \nu -> j; \n k <- i-j; k -> f -> show; sleep 5;}";// k <- k + i;}"; //k -> f -> show; \n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		// generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		// output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		// write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		// directly execute bytecode
		String[] args = new String[] { "http://i.imgur.com/O75rAPi.jpg" }; // create
																			// command
																			// line
																			// argument
																			// array
																			// to
																			// initialize
																			// params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		String expOut = "";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
		System.setOut(new PrintStream(outContent));
		instance.run();
		//assertEquals(expOut, PLPRuntimeLog.getString());
		System.setOut(oldStream);
		instance.run();
	}

	@Test
	public void convolveImg() throws Exception {
		// scan, parse, and type check the program
		String progname = "convolveImg";
		String input = progname + " url u {image i frame f \nu -> i -> convolve -> f -> show;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		// generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		// output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		// write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		// directly execute bytecode
		String[] args = new String[] { "http://i.imgur.com/O75rAPi.jpg" }; // create
																			// command
																			// line
																			// argument
																			// array
																			// to
																			// initialize
																			// params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		String expOut = "";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
		System.setOut(new PrintStream(outContent));
		instance.run();
		//assertEquals(expOut, PLPRuntimeLog.getString());
		System.setOut(oldStream);
		instance.run();
	}

	@Test
	public void readFromURLandDisplay() throws Exception {
		// scan, parse, and type check the program
		String progname = "readFromURLandDisplay";
		String input = progname + " url u {image i frame f \nu -> i;i -> f -> show;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		// generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		// output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		// write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		// directly execute bytecode
		String[] args = new String[] { "http://i.imgur.com/O75rAPi.jpg" }; // create
																			// command
																			// line
																			// argument
																			// array
																			// to
																			// initialize
																			// params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		String expOut = "";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
		System.setOut(new PrintStream(outContent));
		instance.run();
		//assertEquals(expOut, PLPRuntimeLog.getString());
		System.setOut(oldStream);
		instance.run();
	}

	@Test
	public void imgMove2() throws Exception {
		// scan, parse, and type check the program
		String progname = "imgMove2";
		String input = progname
				+ " url u {image i frame f \nu -> i;i -> f -> show; \nsleep 5; \ninteger x \ninteger y \nx <- screenwidth;\ny <- screenheight; \nf -> move (x*3/4,y/4) -> show;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		// generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		// output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		// write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		// directly execute bytecode
		String[] args = new String[] { "http://i.imgur.com/O75rAPi.jpg" }; // create
																			// command
																			// line
																			// argument
																			// array
																			// to
																			// initialize
																			// params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		String expOut = "";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
		System.setOut(new PrintStream(outContent));
		instance.run();
		//assertEquals(expOut, PLPRuntimeLog.getString());
		System.setOut(oldStream);
		instance.run();
	}

	@Test
	public void subImage2() throws Exception {
		// scan, parse, and type check the program
		String progname = "subImage2";
		String input = progname + " url u {image i image j frame f \nu -> i; \nu -> j; \n i <- i-j; i -> f -> show;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		// generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		// output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		// write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		// directly execute bytecode
		String[] args = new String[] { "http://i.imgur.com/O75rAPi.jpg" }; // create
																			// command
																			// line
																			// argument
																			// array
																			// to
																			// initialize
																			// params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		String expOut = "";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
		System.setOut(new PrintStream(outContent));
		instance.run();
		//assertEquals(expOut, PLPRuntimeLog.getString());
		System.setOut(oldStream);
		instance.run();
	}

	@Test
	public void modImage() throws Exception {
		// scan, parse, and type check the program
		String progname = "modImage";
		String input = progname + " url u {image i image j frame f \nu -> j; \n i <- j%128; i -> f -> show;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		// generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		// output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		// write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		// directly execute bytecode
		String[] args = new String[] { "http://i.imgur.com/O75rAPi.jpg" }; // create
																			// command
																			// line
																			// argument
																			// array
																			// to
																			// initialize
																			// params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		String expOut = "";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
		System.setOut(new PrintStream(outContent));
		instance.run();
		//assertEquals(expOut, PLPRuntimeLog.getString());
		System.setOut(oldStream);
		instance.run();
	}

	@Test
	public void allTheOps() throws Exception {
		// scan, parse, and type check the program
		String progname = "allTheOps";
		String input = progname + " file u {image i frame f \nu -> i -> gray -> convolve -> blur -> i -> f -> show;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		// generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		// output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		// write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		// directly execute bytecode
		String[] args = new String[] { "C:\\Divya\\WPFPageSwitch\\Images\\Wave.jpg" }; // create
																			// command
																			// line
																			// argument
																			// array
																			// to
																			// initialize
																			// params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		String expOut = "";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
		System.setOut(new PrintStream(outContent));
		instance.run();
		//assertEquals(expOut, PLPRuntimeLog.getString());
		System.setOut(oldStream);
		instance.run();
	}

	@Test
	public void readFromURLandDisplayDisplay2() throws Exception {
		// scan, parse, and type check the program
		String progname = "readFromURLandDisplayDisplay2";
		String input = progname + " url u {image i frame f \nu -> i -> f -> show;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		// generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		// output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		// write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		// directly execute bytecode
		String[] args = new String[] { "http://i.imgur.com/O75rAPi.jpg" }; // create
																			// command
																			// line
																			// argument
																			// array
																			// to
																			// initialize
																			// params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		String expOut = "";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
		System.setOut(new PrintStream(outContent));
		instance.run();
		//assertEquals(expOut, PLPRuntimeLog.getString());
		System.setOut(oldStream);
		instance.run();
	}

	@Test
	public void readFromURLandWriteToFile() throws Exception {
		// scan, parse, and type check the program
		String progname = "readFromURLandWriteToFile";
		String input = progname + " url u, \nfile out \n{image i frame f \nu -> i;i -> f -> show; \n i -> out;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		// generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		// output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		// write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		// directly execute bytecode
		String[] args = new String[] { "http://i.imgur.com/O75rAPi.jpg",
				"C:/Divya/WPFPageSwitch/Images/blah.jpg" }; // create
																							// command
																							// line
																							// argument
																							// array
																							// to
																							// initialize
																							// params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		String expOut = "";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
		System.setOut(new PrintStream(outContent));
		instance.run();
		//assertEquals(expOut, PLPRuntimeLog.getString());
		System.setOut(oldStream);
		instance.run();
	}

	@Test
	public void blurImg() throws Exception {
		// scan, parse, and type check the program
		String progname = "blurImg";
		String input = progname + " url u {image i frame f \nu -> i -> blur -> f -> show;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		// generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		// output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		// write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		// directly execute bytecode
		String[] args = new String[] { "http://i.imgur.com/O75rAPi.jpg" }; // create
																			// command
																			// line
																			// argument
																			// array
																			// to
																			// initialize
																			// params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		String expOut = "";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
		System.setOut(new PrintStream(outContent));
		instance.run();
		//assertEquals(expOut, PLPRuntimeLog.getString());
		System.setOut(oldStream);
		instance.run();
	}

	@Test
	public void grayImg() throws Exception {
		// scan, parse, and type check the program
		String progname = "grayImg";
		String input = progname + " url u {image i frame f \nu -> i -> gray -> f -> show;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		// generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		// output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		// write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		// directly execute bytecode
		String[] args = new String[] { "http://i.imgur.com/O75rAPi.jpg" }; // create
																			// command
																			// line
																			// argument
																			// array
																			// to
																			// initialize
																			// params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		String expOut = "";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
		System.setOut(new PrintStream(outContent));
		instance.run();
		//assertEquals(expOut, PLPRuntimeLog.getString());
		System.setOut(oldStream);
		instance.run();
	}

	@Test
	public void divImage() throws Exception {
		// scan, parse, and type check the program
		String progname = "divImage";
		String input = progname + " url u {image i image j frame f \nu -> j;\n i <- j/2; i -> f -> show;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		// generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		// output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		// write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		// directly execute bytecode
		String[] args = new String[] {"http://i.imgur.com/O75rAPi.jpg"}; // create
																			// command
																			// line
																			// argument
																			// array
																			// to
																			// initialize
																			// params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		String expOut = "";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
		System.setOut(new PrintStream(outContent));
		instance.run();
		//assertEquals(expOut, PLPRuntimeLog.getString());
		System.setOut(oldStream);
		instance.run();
	}

	@Test
	public void readFromURLandWriteScaledImageToFile() throws Exception {
		// scan, parse, and type check the program
		String progname = "readFromURLandWriteScaledImageToFile";
		String input = progname
				+ " url u, \nfile out \n{image i frame f \nu -> scale (3) -> i;i -> f -> show; \n i -> out;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		// generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		// output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		// write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		// directly execute bytecode
		String[] args = new String[] { "http://i.imgur.com/O75rAPi.jpg",
				"C:/Divya/WPFPageSwitch/Images/blah2.jpg" }; // create
																							// command
																							// line
																							// argument
																							// array
																							// to
																							// initialize
																							// params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		String expOut = "";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
		System.setOut(new PrintStream(outContent));
		instance.run();
		//assertEquals(expOut, PLPRuntimeLog.getString());
		System.setOut(oldStream);
		instance.run();
	}

	@Test
	public void readFromFile() throws Exception {
		// scan, parse, and type check the program
		String progname = "readFromFile";
		String input = progname + " file u {image i frame f \nu -> i;i -> f -> show; \n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		// generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		// output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		// write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		// directly execute bytecode
		String[] args = new String[] { "C:/Divya/WPFPageSwitch/Images/wave.jpg" }; // create
																													// command
																													// line
																													// argument
																													// array
																													// to
																													// initialize
																													// params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		String expOut = "";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
		System.setOut(new PrintStream(outContent));
		instance.run();
		//assertEquals(expOut, PLPRuntimeLog.getString());
		System.setOut(oldStream);
		instance.run();
	}

	@Test
	public void barArrowGray() throws Exception {
		// scan, parse, and type check the program
		String progname = "barArrowGray";
		String input = progname + " url u {image i frame f \nu -> i |-> gray -> f -> show;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		// generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		// output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		// write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		// directly execute bytecode
		String[] args = new String[] { "http://i.imgur.com/O75rAPi.jpg" }; // create
																			// command
																			// line
																			// argument
																			// array
																			// to
																			// initialize
																			// params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		String expOut = "";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
		System.setOut(new PrintStream(outContent));
		instance.run();
		//assertEquals(expOut, PLPRuntimeLog.getString());
		System.setOut(oldStream);
		instance.run();
	}

	@Test
	public void assignImage() throws Exception {
		// scan, parse, and type check the program
		String progname = "assignImage";
		String input = progname + " url u {image i image j frame f \nu -> i; j <- i;j -> f -> show;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		// generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		// output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		// write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		// directly execute bytecode
		String[] args = new String[] { "http://i.imgur.com/O75rAPi.jpg" }; // create
																			// command
																			// line
																			// argument
																			// array
																			// to
																			// initialize
																			// params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		String expOut = "";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
		System.setOut(new PrintStream(outContent));
		instance.run();
		//assertEquals(expOut, PLPRuntimeLog.getString());
		System.setOut(oldStream);
		instance.run();
	}

	@Test
	public void scaleImage() throws Exception {
		// scan, parse, and type check the program
		String progname = "scaleImage";
		String input = progname
				+ " url u {image i frame f \nu -> i -> f -> show; frame f2 \ni -> scale (3) -> f2 -> show;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		// generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		// output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		// write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		// directly execute bytecode
		String[] args = new String[] { "http://i.imgur.com/O75rAPi.jpg" }; // create
																			// command
																			// line
																			// argument
																			// array
																			// to
																			// initialize
																			// params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		String expOut = "";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
		System.setOut(new PrintStream(outContent));
		instance.run();
		//assertEquals(expOut, PLPRuntimeLog.getString());
		System.setOut(oldStream);
		instance.run();
	}

	@Test
	public void imgMove() throws Exception {
		// scan, parse, and type check the program
		String progname = "imgMove";
		String input = progname
				+ " url u {image i frame f \nu -> i;i -> f -> show; \nsleep 5; \ninteger x \ninteger y \nf -> xloc -> x; \nf -> yloc -> y; \nf -> move (x+100,y-100) -> show;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		// generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		// output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		// write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		// directly execute bytecode
		String[] args = new String[] { "http://i.imgur.com/O75rAPi.jpg" }; // create
																			// command
																			// line
																			// argument
																			// array
																			// to
																			// initialize
																			// params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		String expOut = "";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
		System.setOut(new PrintStream(outContent));
		instance.run();
		//assertEquals(expOut, PLPRuntimeLog.getString());
		System.setOut(oldStream);
		instance.run();
	}

	@Test
	public void assignImageAndFrame() throws Exception {
		// scan, parse, and type check the program
		String progname = "assignImageAndFrame";
		String input = progname
				+ " url u {image i image i1 frame f frame f1\nu -> i -> f -> show; frame f2 \ni -> scale (3) -> f2 -> show; \n i1 <- i; \n f2 <- f;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		// generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		// output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		// write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		// directly execute bytecode
		String[] args = new String[] { "http://i.imgur.com/O75rAPi.jpg" }; // create
																			// command
																			// line
																			// argument
																			// array
																			// to
																			// initialize
																			// params
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		String expOut = "";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
		System.setOut(new PrintStream(outContent));
		instance.run();
		//assertEquals(expOut, PLPRuntimeLog.getString());
		System.setOut(oldStream);
		instance.run();
	}
}
